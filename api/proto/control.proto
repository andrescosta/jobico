syntax = "proto3";

option go_package = "/types";

import "common.proto";

service Control {
  rpc GetMechants (GetMerchantsRequest) returns (GetMerchantsReply) {}
  rpc AddMerchant (AddMerchantRequest) returns (AddMerchantReply) {}
  rpc GetEventDefs (GetEventDefsRequest) returns (GetEventDefsReply) {}
  rpc AddEventDef (AddEventDefRequest) returns (AddEventDefReply) {}
  rpc GetQueueDefs(GetQueueDefsRequest) returns (GetQueueDefsReply){}
  rpc AddQueueDef(AddQueueDefRequest) returns (AddQueueDefReply){}
  rpc GetEnviroment(GetEnviromentRequest) returns (GetEnviromentReply){}
  rpc AddEnviroment(AddEnviromentRequest) returns (AddEnviromentReply){}
  rpc UpdateEnviroment(UpdateEnviromentRequest) returns (UpdateEnviromentReply){}
}

message GetQueueDefsRequest {
  MerchantId merchantId=1;
}

message GetQueueDefsReply {
  repeated QueueDef queues = 1;
}

message AddQueueDefRequest {
  QueueDef queue = 1;
}

message AddQueueDefReply {
  QueueDef queue = 1;  
}

message GetEnviromentRequest {
}

message GetEnviromentReply {
  Environment environment = 1;
}

message AddEnviromentRequest {
  Environment environment = 1;
}

message UpdateEnviromentReply {
}

message UpdateEnviromentRequest {
  Environment environment = 1;
}

message AddEnviromentReply {
  Environment environment = 1;
}


message GetEventDefsRequest {
  MerchantId merchantId=1;
}
  
message GetEventDefsReply {
	repeated EventDef events = 1;
}

message AddEventDefRequest {
	EventDef event = 1;
}
  
message AddEventDefReply {
	EventDef event = 1;
}

message AddExecutorDefRequest {
	ExecutorDef executor = 1;
}
  
message AddExecutorDefReply {
	ExecutorDef executor = 1;
}

message GetExecutorDefsRequest {
  MerchantId merchantId=1;
}
  
message GetExecutorDefsReply {
	repeated ExecutorDef executors = 1;
}

message GetMerchantsRequest {
}

message GetMerchantsReply {
  repeated Merchant merchants=1;
}

message AddMerchantRequest {
  Merchant merchant=1;
}

message AddMerchantReply {
  Merchant merchant=1;
}


message Merchant {
  string ID = 1;
  MerchantId merchantId=2;
  string Name = 3;
}

message QueueDef {
  string ID  = 1; 
  QueueId queueId = 2;
  MerchantId merchantId=3;
  ExecutorDef executor=4;
}

message Environment{
  string ID = 1;
  map<string, Host> servers = 2;
}

message EventDef {
  string ID = 1;
  string schema = 2;
  QueueId queueId = 3;
  MerchantId merchantId=4;
}

message ExecutorDef {
  string ID = 1;
  EventDef event = 2;
  string package = 3;
}