// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: recorder.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Recorder_GetJobExecutionsStr_FullMethodName = "/Recorder/GetJobExecutionsStr"
	Recorder_GetJobExecutions_FullMethodName    = "/Recorder/GetJobExecutions"
	Recorder_AddJobExecution_FullMethodName     = "/Recorder/AddJobExecution"
)

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecorderClient interface {
	GetJobExecutionsStr(ctx context.Context, in *GetJobExecutionsRequest, opts ...grpc.CallOption) (Recorder_GetJobExecutionsStrClient, error)
	GetJobExecutions(ctx context.Context, in *GetJobExecutionsRequest, opts ...grpc.CallOption) (*GetJobExecutionsReply, error)
	AddJobExecution(ctx context.Context, in *AddJobExecutionRequest, opts ...grpc.CallOption) (*Void, error)
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) GetJobExecutionsStr(ctx context.Context, in *GetJobExecutionsRequest, opts ...grpc.CallOption) (Recorder_GetJobExecutionsStrClient, error) {
	stream, err := c.cc.NewStream(ctx, &Recorder_ServiceDesc.Streams[0], Recorder_GetJobExecutionsStr_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recorderGetJobExecutionsStrClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Recorder_GetJobExecutionsStrClient interface {
	Recv() (*GetJobExecutionsReply, error)
	grpc.ClientStream
}

type recorderGetJobExecutionsStrClient struct {
	grpc.ClientStream
}

func (x *recorderGetJobExecutionsStrClient) Recv() (*GetJobExecutionsReply, error) {
	m := new(GetJobExecutionsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recorderClient) GetJobExecutions(ctx context.Context, in *GetJobExecutionsRequest, opts ...grpc.CallOption) (*GetJobExecutionsReply, error) {
	out := new(GetJobExecutionsReply)
	err := c.cc.Invoke(ctx, Recorder_GetJobExecutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) AddJobExecution(ctx context.Context, in *AddJobExecutionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Recorder_AddJobExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
// All implementations must embed UnimplementedRecorderServer
// for forward compatibility
type RecorderServer interface {
	GetJobExecutionsStr(*GetJobExecutionsRequest, Recorder_GetJobExecutionsStrServer) error
	GetJobExecutions(context.Context, *GetJobExecutionsRequest) (*GetJobExecutionsReply, error)
	AddJobExecution(context.Context, *AddJobExecutionRequest) (*Void, error)
	mustEmbedUnimplementedRecorderServer()
}

// UnimplementedRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (UnimplementedRecorderServer) GetJobExecutionsStr(*GetJobExecutionsRequest, Recorder_GetJobExecutionsStrServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobExecutionsStr not implemented")
}
func (UnimplementedRecorderServer) GetJobExecutions(context.Context, *GetJobExecutionsRequest) (*GetJobExecutionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobExecutions not implemented")
}
func (UnimplementedRecorderServer) AddJobExecution(context.Context, *AddJobExecutionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobExecution not implemented")
}
func (UnimplementedRecorderServer) mustEmbedUnimplementedRecorderServer() {}

// UnsafeRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecorderServer will
// result in compilation errors.
type UnsafeRecorderServer interface {
	mustEmbedUnimplementedRecorderServer()
}

func RegisterRecorderServer(s grpc.ServiceRegistrar, srv RecorderServer) {
	s.RegisterService(&Recorder_ServiceDesc, srv)
}

func _Recorder_GetJobExecutionsStr_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobExecutionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecorderServer).GetJobExecutionsStr(m, &recorderGetJobExecutionsStrServer{stream})
}

type Recorder_GetJobExecutionsStrServer interface {
	Send(*GetJobExecutionsReply) error
	grpc.ServerStream
}

type recorderGetJobExecutionsStrServer struct {
	grpc.ServerStream
}

func (x *recorderGetJobExecutionsStrServer) Send(m *GetJobExecutionsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Recorder_GetJobExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetJobExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recorder_GetJobExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetJobExecutions(ctx, req.(*GetJobExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_AddJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).AddJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recorder_AddJobExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).AddJobExecution(ctx, req.(*AddJobExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recorder_ServiceDesc is the grpc.ServiceDesc for Recorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobExecutions",
			Handler:    _Recorder_GetJobExecutions_Handler,
		},
		{
			MethodName: "AddJobExecution",
			Handler:    _Recorder_AddJobExecution_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobExecutionsStr",
			Handler:       _Recorder_GetJobExecutionsStr_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "recorder.proto",
}
