syntax = "proto3";

option go_package = "/types";

import "common.proto";

service Control {
  rpc GetTenants (GetTenantsRequest) returns (GetTenantsReply) {}
  rpc AddTenant (AddTenantRequest) returns (AddTenantReply) {}
  rpc AddPackage (AddJobPackageRequest) returns (AddJobPackageReply) {}
  rpc GetAllPackages (GetAllJobPackagesRequest) returns (GetAllJobPackagesReply) {}
  rpc GetPackages (GetJobPackagesRequest) returns (GetJobPackagesReply) {}
  rpc UpdatePackage (UpdateJobPackageRequest) returns (UpdateJobPackageReply) {}
  rpc GetEnviroment(GetEnviromentRequest) returns (GetEnviromentReply){}
  rpc AddEnviroment(AddEnviromentRequest) returns (AddEnviromentReply){}
  rpc UpdateEnviroment(UpdateEnviromentRequest) returns (UpdateEnviromentReply){}
}

message AddJobPackageRequest{
  JobPackage package = 1;
}
message AddJobPackageReply{
  JobPackage package = 1;
}
message GetAllJobPackagesRequest{
}
message GetAllJobPackagesReply{
  repeated JobPackage packages = 1;
}
message GetJobPackagesRequest{
  string tenantId = 1;  
}
message GetJobPackagesReply{
  repeated JobPackage packages = 1;
}
message UpdateJobPackageRequest{
  JobPackage package = 1;
}
message UpdateJobPackageReply{
}
message GetEnviromentRequest {
}

message GetEnviromentReply {
  Environment environment = 1;
}

message AddEnviromentRequest {
  Environment environment = 1;
}

message UpdateEnviromentReply {
}

message UpdateEnviromentRequest {
  Environment environment = 1;
}

message AddEnviromentReply {
  Environment environment = 1;
}


message GetTenantsRequest {
}

message GetTenantsReply {
  repeated Tenant Tenants=1;
}

message AddTenantRequest {
  Tenant tenant=1;
}

message AddTenantReply {
  Tenant tenant=1;
}


message Environment{
  optional uint64 ID = 1;
  map<string, Host> servers = 2;
}

  
message JobPackage {
    optional uint64 ID = 1;
    string jobPackageId = 2;
    string name = 3;
    string tenantId = 4;
    repeated QueueDef queues = 5;
    repeated EventDef events = 6;
    repeated RuntimeDef runtimes = 7;
    repeated ExecutorDef executors = 8;
}

message Tenant {
  optional uint64 ID = 1;
  string tenantId=2;
  string Name = 3;
}

message QueueDef {
  optional uint64 ID  = 1; 
  string queueId = 2;
  string name = 3;
}


message ExecutorDef {
  optional uint64 ID = 1;
  string executorId = 2;
  string name = 3;
  string runtimeId = 4;
  string funcName = 5;
  repeated string supportedEvents = 6;
}

message RuntimeDef{
  optional uint64 ID = 1;
  string runtimeId = 2;
  string name = 3;
  string moduleRef = 4;
  RuntimeType type = 5;
}

enum RuntimeType {
  Wasm = 0;
}

message EventDef {
  optional uint64 ID = 1;
  string eventId = 2;
  string name = 3;
  DataType dataType = 4;
  optional SchemaDef schema = 5;
  string supplierQueueId = 6;
}

enum DataType {
  Json = 0;
}

message SchemaDef {
    optional uint64 ID = 1;
    string schemaId = 2;
    string name = 3;
    string schemaRef = 4;
}

/*
  
  rpc GetEventDefs (GetEventDefsRequest) returns (GetEventDefsReply) {}
  rpc AddEventDef (AddEventDefRequest) returns (AddEventDefReply) {}
  rpc GetQueueDefs(GetQueueDefsRequest) returns (GetQueueDefsReply){}
  rpc AddQueueDef(AddQueueDefRequest) returns (AddQueueDefReply){}
  

message GetQueueDefsRequest {
  string tenantId=1;
}

message GetQueueDefsReply {
  repeated QueueDef queues = 1;
}

message AddQueueDefRequest {
  QueueDef queue = 1;
}

message AddQueueDefReply {
  QueueDef queue = 1;  
}
message GetEventDefsRequest {
  string tenantId=1;
}
  
message GetEventDefsReply {
	repeated EventDef events = 1;
}

message AddEventDefRequest {
	EventDef event = 1;
}
  
message AddEventDefReply {
	EventDef event = 1;
}

message AddExecutorDefRequest {
	ExecutorDef executor = 1;
}
  
message AddExecutorDefReply {
	ExecutorDef executor = 1;
}

message GetExecutorDefsRequest {
  string tenantId=1;
}
  
message GetExecutorDefsReply {
	repeated ExecutorDef executors = 1;
}
*/
