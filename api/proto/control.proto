syntax = "proto3";

option go_package = "/types";

import "common.proto";

service Control {
  rpc GetMechants (GetMerchantsRequest) returns (GetMerchantsReply) {}
  rpc AddMerchant (AddMerchantRequest) returns (AddMerchantReply) {}
  rpc AddPackage (AddJobPackageRequest) returns (AddJobPackageReply) {}
  rpc GetAllPackages (GetAllJobPackagesRequest) returns (GetAllJobPackagesReply) {}
  rpc GetPackages (GetJobPackagesRequest) returns (GetJobPackagesReply) {}
  rpc UpdatePackage (UpdateJobPackageRequest) returns (UpdateJobPackageReply) {}
  rpc GetEnviroment(GetEnviromentRequest) returns (GetEnviromentReply){}
  rpc AddEnviroment(AddEnviromentRequest) returns (AddEnviromentReply){}
  rpc UpdateEnviroment(UpdateEnviromentRequest) returns (UpdateEnviromentReply){}
}

message AddJobPackageRequest{
  JobPackage package = 1;
}
message AddJobPackageReply{
  JobPackage package = 1;
}
message GetAllJobPackagesRequest{
}
message GetAllJobPackagesReply{
  repeated JobPackage packages = 1;
}
message GetJobPackagesRequest{
  string merchantId = 1;  
}
message GetJobPackagesReply{
  repeated JobPackage packages = 1;
}
message UpdateJobPackageRequest{
  JobPackage package = 1;
}
message UpdateJobPackageReply{
}
message GetEnviromentRequest {
}

message GetEnviromentReply {
  Environment environment = 1;
}

message AddEnviromentRequest {
  Environment environment = 1;
}

message UpdateEnviromentReply {
}

message UpdateEnviromentRequest {
  Environment environment = 1;
}

message AddEnviromentReply {
  Environment environment = 1;
}


message GetMerchantsRequest {
}

message GetMerchantsReply {
  repeated Merchant merchants=1;
}

message AddMerchantRequest {
  Merchant merchant=1;
}

message AddMerchantReply {
  Merchant merchant=1;
}


message Merchant {
  optional uint64 ID = 1;
  string merchantId=2;
  string Name = 3;
}

message QueueDef {
  optional uint64 ID  = 1; 
  string queueId = 2;
  string name = 3;
}

message Environment{
  optional uint64 ID = 1;
  map<string, Host> servers = 2;
}

message EventDef {
  optional uint64 ID = 1;
  string name = 2;
  DataTypes dataType = 3;
  optional SchemaDef schema = 4;
  QueueDef supplierQueue = 5;
}

enum DataTypes {
  JSon = 0;
}

message SchemaDef {
    optional uint64 ID = 1;
    string schemaId = 2;
    string name = 3;
    string schemaRef = 4;
}

message ExecutorDef {
  optional uint64 ID = 1;
  string name = 2;
  PackageDef package=3;
  repeated EventDef supportedEvents = 4;
}
message PackageDef{
  optional uint64 ID = 1;
  string packageId = 2;
  string name = 3;
  string packageRef = 4;
  string type = 5;
  
}
message JobPackage {
  optional uint64 ID = 1;
  string name = 2;
  string merchantId = 3;
  repeated QueueDef queues = 4;
  repeated EventDef events = 6;
  repeated ExecutorDef executors = 5;
}
 

/*
  
  rpc GetEventDefs (GetEventDefsRequest) returns (GetEventDefsReply) {}
  rpc AddEventDef (AddEventDefRequest) returns (AddEventDefReply) {}
  rpc GetQueueDefs(GetQueueDefsRequest) returns (GetQueueDefsReply){}
  rpc AddQueueDef(AddQueueDefRequest) returns (AddQueueDefReply){}
  

message GetQueueDefsRequest {
  string merchantId=1;
}

message GetQueueDefsReply {
  repeated QueueDef queues = 1;
}

message AddQueueDefRequest {
  QueueDef queue = 1;
}

message AddQueueDefReply {
  QueueDef queue = 1;  
}
message GetEventDefsRequest {
  string merchantId=1;
}
  
message GetEventDefsReply {
	repeated EventDef events = 1;
}

message AddEventDefRequest {
	EventDef event = 1;
}
  
message AddEventDefReply {
	EventDef event = 1;
}

message AddExecutorDefRequest {
	ExecutorDef executor = 1;
}
  
message AddExecutorDefReply {
	ExecutorDef executor = 1;
}

message GetExecutorDefsRequest {
  string merchantId=1;
}
  
message GetExecutorDefsReply {
	repeated ExecutorDef executors = 1;
}
*/
