// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: control.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	GetEvents(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventReply, error)
	AddEvents(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*AddEventReply, error)
	AddProcessor(ctx context.Context, in *AddProcessorRequest, opts ...grpc.CallOption) (*AddProcessorReply, error)
	GetProcessors(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (*GetProcessorsReply, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) GetEvents(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventReply, error) {
	out := new(GetEventReply)
	err := c.cc.Invoke(ctx, "/Control/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) AddEvents(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*AddEventReply, error) {
	out := new(AddEventReply)
	err := c.cc.Invoke(ctx, "/Control/AddEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) AddProcessor(ctx context.Context, in *AddProcessorRequest, opts ...grpc.CallOption) (*AddProcessorReply, error) {
	out := new(AddProcessorReply)
	err := c.cc.Invoke(ctx, "/Control/AddProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetProcessors(ctx context.Context, in *GetProcessorsRequest, opts ...grpc.CallOption) (*GetProcessorsReply, error) {
	out := new(GetProcessorsReply)
	err := c.cc.Invoke(ctx, "/Control/GetProcessors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	GetEvents(context.Context, *GetEventRequest) (*GetEventReply, error)
	AddEvents(context.Context, *AddEventRequest) (*AddEventReply, error)
	AddProcessor(context.Context, *AddProcessorRequest) (*AddProcessorReply, error)
	GetProcessors(context.Context, *GetProcessorsRequest) (*GetProcessorsReply, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) GetEvents(context.Context, *GetEventRequest) (*GetEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedControlServer) AddEvents(context.Context, *AddEventRequest) (*AddEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvents not implemented")
}
func (UnimplementedControlServer) AddProcessor(context.Context, *AddProcessorRequest) (*AddProcessorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcessor not implemented")
}
func (UnimplementedControlServer) GetProcessors(context.Context, *GetProcessorsRequest) (*GetProcessorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessors not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetEvents(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_AddEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).AddEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/AddEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).AddEvents(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_AddProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).AddProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/AddProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).AddProcessor(ctx, req.(*AddProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetProcessors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetProcessors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/GetProcessors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetProcessors(ctx, req.(*GetProcessorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _Control_GetEvents_Handler,
		},
		{
			MethodName: "AddEvents",
			Handler:    _Control_AddEvents_Handler,
		},
		{
			MethodName: "AddProcessor",
			Handler:    _Control_AddProcessor_Handler,
		},
		{
			MethodName: "GetProcessors",
			Handler:    _Control_GetProcessors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}
