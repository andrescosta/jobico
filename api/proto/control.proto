syntax = "proto3";

option go_package = "/types";

import "common.proto";

service Control {
  rpc GetTenants (GetTenantsRequest) returns (GetTenantsReply) {}
  rpc AddTenant (AddTenantRequest) returns (AddTenantReply) {}
  rpc AddPackage (AddJobPackageRequest) returns (AddJobPackageReply) {}
  rpc GetAllPackages (GetAllJobPackagesRequest) returns (GetAllJobPackagesReply) {}
  rpc GetPackages (GetJobPackagesRequest) returns (GetJobPackagesReply) {}
  rpc UpdatePackage (UpdateJobPackageRequest) returns (UpdateJobPackageReply) {}
  rpc DeletePackage (DeleteJobPackageRequest) returns (DeleteJobPackageReply) {}
  rpc UpdateToPackagesStr (UpdateToPackagesStrRequest) returns (stream UpdateToPackagesStrReply) {}
  rpc GetEnviroment(GetEnviromentRequest) returns (GetEnviromentReply){}
  rpc UpdateToEnviromentStr(UpdateToEnviromentStrRequest) returns (stream UpdateToEnviromentStrReply){}
  rpc AddEnviroment(AddEnviromentRequest) returns (AddEnviromentReply){}
  rpc UpdateEnviroment(UpdateEnviromentRequest) returns (UpdateEnviromentReply){}
}



message UpdateToEnviromentStrRequest {}

message UpdateToEnviromentStrReply {
  UpdateType type=1;
  Environment object = 2;
}

message UpdateToPackagesStrRequest{
  string tenant = 1; //  not supported
}

message UpdateToPackagesStrReply{
  UpdateType type=1;
  JobPackage object = 2;
}

message AddJobPackageRequest{
  JobPackage package = 1;
}
message AddJobPackageReply{
  JobPackage package = 1;
}
message GetAllJobPackagesRequest{
}
message GetAllJobPackagesReply{
  repeated JobPackage packages = 1;
}
message GetJobPackagesRequest{
  string tenant = 1;  
  optional string ID = 2; 
}
message GetJobPackagesReply{
  repeated JobPackage packages = 1;
}
message UpdateJobPackageRequest{
  JobPackage package = 1;
}
message UpdateJobPackageReply{
}
message DeleteJobPackageRequest{
  JobPackage package = 1;
}
message DeleteJobPackageReply{
}

message GetEnviromentRequest {
}

message GetEnviromentReply {
  optional Environment environment = 1;
}

message AddEnviromentRequest {
  Environment environment = 1;
}

message UpdateEnviromentReply {
}

message UpdateEnviromentRequest {
  Environment environment = 1;
}

message AddEnviromentReply {
  Environment environment = 1;
}


message GetTenantsRequest {
  optional string ID = 1;
  optional string tenant=2;
}

message GetTenantsReply {
  repeated Tenant Tenants=1;
}

message AddTenantRequest {
  Tenant tenant=1;
}

message AddTenantReply {
  Tenant tenant=1;
}


message Environment{
  string ID = 1;
  repeated Service services=2;
  optional Tenant tenant=3; // for future
}

message Service {
  string ID = 1;
  optional string name = 2;
  repeated Host servers = 3;
  repeated Storage storages = 4;
}

message Storage {
  string ID = 1;
  optional string Name = 2;
  string reference = 3;
  StorageType type = 4;
}

enum StorageType {
  LocalDirectory = 0;
}

message JobPackage {
    string ID = 1;
    optional string name = 2;
    string tenant = 3;
    repeated QueueDef queues = 4;
    repeated JobDef jobs = 5;
    repeated RuntimeDef runtimes = 6;
}

message Tenant {
  string ID = 1;
  optional string Name = 2;
}

message QueueDef {
  string ID = 1;
  optional string name = 2;
}


message RuntimeDef{
  string ID = 1;
  optional string name = 2;
  string moduleRef = 3;
  optional string mainFuncName = 4;
  RuntimeType type = 5;
  optional Platform platform = 6;
}

enum RuntimeType {
  Wasm10 = 0;
  Go = 1;
}

enum Platform {
  TinyGO = 0;
}

message JobDef {
  EventDef event = 1;
  optional ResultDef result = 2;
}

message ResultDef {
  optional EventDef ok = 1;
  optional EventDef error = 2;
}

message EventDef {
  string ID = 1;
  optional string name = 2;
  DataType dataType = 3;
  optional SchemaDef schema = 4;
  string supplierQueue = 5;
  string runtimeId = 6;
}

enum DataType {
  Json = 0;
}

message SchemaDef {
    string ID = 1;
    optional string name = 2;
    string schemaRef = 3;
}
